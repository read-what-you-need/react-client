{"version":3,"sources":["Base64.js","components/Read/txt/naval.txt","components/Read/txt/benjamin.txt","components/Read/txt/think.txt","App.js","components/Read/SearchContextMangement.js","components/Read/DiscoverContextManagement.js","components/Read/TopWordsView/FlatView.js","components/Read/TopWordsView/TableView.js","Loaders/KeyWordLoader.js","shuffle.svg","components/Read/TopWords.js","Loaders/useWindowDimensions.js","Loaders/SnippetLoader.js","components/Read/ImpLineModules/ImpLineItems.js","components/Read/ImpLines.js","components/Read/Discover.js","components/Read/SmartSearch.js","components/Read/ReadHome.js","components/Faqs.js","index.js"],"names":["props","state","files","e","target","allFiles","file","i","reader","FileReader","readAsDataURL","onload","fileInfo","name","type","size","Math","round","base64","result","push","length","multiple","onDone","Button","variant","component","accept","onChange","this","handleChange","bind","style","display","React","Component","defaultProps","useStyles","makeStyles","theme","backdrop","zIndex","drawer","color","App","history","useHistory","useState","selectedFile","setSelectedFile","pdfText","setPdfText","textLoading","setTextLoading","fileName","setFileName","fileSize","setFileSize","useEffect","uuidv4","axiosConfig","headers","UploadIcon","marginLeft","width","src","alt","classes","className","endIcon","event","floor","replace","marginTop","onClick","data","FormData","append","axios","post","then","res","catch","error","Backdrop","open","CircularProgress","Container","fluid","marginBottom","Row","Col","xs","md","Paper","elevation","fetch","Allen_File","r","text","height","backgroundImage","backgroundSize","backgroundRepeat","borderRadius","Naval_File","Benjamin_File","backgroundPosition","SearchContext","createContext","search","sessionId","setSearch","SearchContextProvider","initState","setState","Provider","value","children","DiscoverContext","topWordsSegment","setTopWordsSegment","topWords","setTopWords","topMatchingLines","setTopMatchingLines","root","marginRight","label","fontSize","FlatView","topN","useContext","map","key","Tooltip","title","Chip","preventDefault","random","TableVIew","Divider","KeyWordLoader","viewBox","backgroundColor","foregroundColor","x","y","rx","ry","fontWeight","fontStyle","SliceObject","obj","start","end","slicedObj","Object","entries","slice","getRandom","list","TopWords","randomWordsSegment","setRandomWordsSegment","randomWords","setRandomWords","randomButtonClick","setRandomButtonClick","showCount","SetShowCount","setTopN","axiosPayload","firstTopWord","lenTopN","totalSegmentLen","segment","segmentLen","segmentInterval","firstMarker","secondMarker","firstSegment","secondSegment","thirdSegment","WordsSegment","chipPlaceholder","IconButton","resp","secondTopWord","thirdTopWord","getRandomTopWords","YourLogo","justifyContent","idx","TableView","class","getWindowDimensions","window","innerWidth","innerHeight","percentMediaScreenSize","X","SnippetLoader","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","useWindowDimensions","speed","ImpLineItems","content","score","itemNo","parseFloat","percentage","IntScore","symbol","trailColor","default","active","success","percent","status","ImpLines","smartSearchResults","setSmartSearch","resultsCount","setResultsCount","demoSessionStatus","setDemoSessionStatus","demoSession","includes","id","clickable","PaddingBottom","Discover","customHoverFocus","background","CssTextField","withStyles","margin","borderBottomColor","borderColor","TextField","SmartSearch","localInputValue","SetLocalInputValue","InputProps","startAdornment","onKeyDown","keyCode","inputProps","ReadHome","location","_id","match","params","Faqs","href","Root","to","path","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.28fd97e3.chunk.js","sourcesContent":["/*! Copyright (c) 2016 Naufal Rabbani (http://github.com/BosNaufal)\n* Licensed Under MIT (http://opensource.org/licenses/MIT)\n*\n* React File Base64 - Version@1.0.0\n*\n*/\n\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\n\nexport default class FileBase64 extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            files: [],\n        };\n    }\n\n    handleChange(e) {\n\n        // get the files\n        let files = e.target.files;\n\n        // Process each file\n        var allFiles = [];\n        for (var i = 0; i < files.length; i++) {\n\n            let file = files[i];\n\n            // Make new FileReader\n            let reader = new FileReader();\n\n            // Convert the file to base64 text\n            reader.readAsDataURL(file);\n\n            // on reader load somthing...\n            reader.onload = () => {\n\n                // Make a fileInfo Object\n                let fileInfo = {\n                    name: file.name,\n                    type: file.type,\n                    size: Math.round(file.size / 1000) + ' kB',\n                    base64: reader.result,\n                    file: file,\n                };\n\n                // Push it to the state\n                allFiles.push(fileInfo);\n\n                // If all files have been proceed\n                if (allFiles.length == files.length) {\n                    // Apply Callback function\n                    if (this.props.multiple) this.props.onDone(allFiles);\n                    else this.props.onDone(allFiles[0]);\n                }\n\n            } // reader.onload\n\n        } // for\n\n    }\n\n    render() {\n        return (\n\n            <Button variant=\"contained\" component=\"label\">\n                Upload Book PDF\n                <input\n                    accept=\".pdf\"\n                    type=\"file\"\n                    onChange={this.handleChange.bind(this)}\n                    multiple={this.props.multiple}\n                    style={{ display: \"none\" }}\n                />\n\n            </Button>\n\n        );\n    }\n}\n\nFileBase64.defaultProps = {\n    multiple: false,\n};","export default __webpack_public_path__ + \"static/media/naval.c8bc51b5.txt\";","export default __webpack_public_path__ + \"static/media/benjamin.1588efc2.txt\";","export default __webpack_public_path__ + \"static/media/think.5553e774.txt\";","import React, { useState } from 'react';\n\n\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport FileBase64 from './Base64'\n\nimport { useHistory } from 'react-router-dom'\n\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\n\nimport { Container, Row, Col } from 'reactstrap';\n\n\nimport './App.css';\nimport { useEffect } from 'react';\n\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\n\nimport Naval_File from './components/Read/txt/naval.txt'\nimport Benjamin_File from './components/Read/txt/benjamin.txt'\nimport Allen_File from './components/Read/txt/think.txt'\n\nconst App = () => {\n\n  const history = useHistory();\n\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [pdfText, setPdfText] = useState('');\n\n  const [textLoading, setTextLoading] = useState(null);\n  const [fileName, setFileName] = useState(null);\n  const [fileSize, setFileSize] = useState(null)\n\n\n\n\n  // const getFiles = (files) => {\n\n  //   //console.log(uuidv4(), typeof (uuidv4()));\n\n  //   var pdfByteString = files['base64'].slice(28)\n\n  //   setSelectedFile(pdfByteString)\n\n  //   //console.log(pdfByteString)\n  // }\n\n\n  useEffect(() => {\n\n    if (textLoading === false) {\n      history.push(`/read/` + uuidv4(), { pdfText, fileName })\n    }\n\n  }, [textLoading]);\n\n\n  const onChangeHandler = event => {\n\n    //console.log(event.target.files[0])\n\n    setSelectedFile(event.target.files[0])\n    setFileSize(Math.floor(event.target.files[0].size / 1000000))\n    setFileName(event.target.files[0].name.replace('.pdf', ''))\n\n  }\n\n\n  let axiosConfig = {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  }\n\n\n  let axiosPayload = {\n\n    \"pdf\": selectedFile\n\n  }\n\n  const onSubmitClickHandler = () => {\n\n    setTextLoading(true);\n\n    const data = new FormData()\n    data.append('pdf-file', selectedFile)\n\n    //console.log(data, 'clicked for upload')\n\n    axios.post(\n      \"http://localhost:8891\",\n      data,\n      axiosConfig\n\n    )\n      .then(res => {\n\n        //console.log(res.statusText, res.data, typeof (res.data))\n\n        setPdfText(res.data)\n        setTextLoading(false);\n\n      }).catch(function (error) {\n        //console.log(error);\n      });\n\n\n\n  }\n\n  const UploadIcon = () => (\n\n    <div style={{ marginLeft: 10 }}>\n      <img style={{ width: 32 }} src=\"static/img/upload.png\" alt=\"upload\" />\n    </div>\n\n  )\n\n\n  const classes = useStyles();\n  const [openLoaderModal, setOpenLoaderModal] = React.useState(false);\n\n\n\n  return (\n\n\n    <div className=\"App\">\n\n      <h1 className=\"Main-header\">Read what you need</h1>\n\n\n      <div className=\"btn-grad-container\" >\n\n\n        <Button variant=\"contained\" component=\"label\" endIcon={<UploadIcon />}>\n          Upload PDF File\n                <input\n            accept=\".pdf\"\n            type=\"file\"\n            onChange={onChangeHandler}\n\n            style={{ display: \"none\" }}\n          />\n\n        </Button>\n        <br />\n        {!selectedFile && <span className=\"upload-limit-notice\">*max upload file size 12 MB</span>}\n        <br />\n\n\n      </div>\n\n      {fileSize > 12 && <span className=\"upload-limit-notice\">please upload a file with a size smaller than 12 MB</span>}\n\n      <div>\n        {\n          selectedFile && fileSize <= 12 &&\n\n          <Button style={{ marginTop: 20 }} variant=\"contained\" component=\"label\"\n            onClick={onSubmitClickHandler}\n\n          >\n            Submit\n          </Button>\n\n        }\n\n        <Backdrop className={classes.backdrop} open={textLoading} >\n          <CircularProgress color=\"inherit\" />\n        </Backdrop>\n\n\n\n\n      </div>\n\n      <p className=\"main-page-try-before\">Try the AI in action</p>\n\n      <hr className=\"break-80\" />\n\n      <Container className=\"main-page-examples\" fluid style={{ marginBottom: 50 }}>\n\n        <Row>\n          <Col xs={12} md={4}>\n            <Paper elevation={5} onClick={() => {\n\n              fetch(Allen_File)\n                .then(r => r.text())\n                .then(text => {\n\n                  const pdfText = text;\n                  const fileName = \"As A Man Thinketh\";\n                  history.push(`/read/think`, { pdfText, fileName })\n                });\n\n            }}>\n\n              <div style={{\n\n                height: 400,\n\n                width: 250,\n\n                backgroundImage: `url(${\"static/img/think.jpg\"})`,\n\n                backgroundSize: 'cover',\n\n                backgroundRepeat: 'no-repeat',\n\n                borderRadius: 10\n\n\n              }\n\n              }>\n\n              </div>\n            </Paper>\n          </Col>\n\n\n          <Col xs={12} md={4}>\n            <Paper elevation={5} onClick={() => {\n\n              fetch(Naval_File)\n                .then(r => r.text())\n                .then(text => {\n\n                  const pdfText = text;\n                  const fileName = \"Almanack of Naval Ravikant\";\n                  history.push(`/read/naval`, { pdfText, fileName })\n                });\n\n            }}>\n\n              <div style={{\n\n                height: 400,\n\n                width: 250,\n\n                backgroundImage: `url(${\"static/img/nava.jpg\"})`,\n\n                backgroundSize: 'cover',\n\n                backgroundRepeat: 'no-repeat',\n\n                borderRadius: 32\n\n\n              }\n\n              }>\n\n              </div>\n            </Paper>\n\n          </Col>\n\n\n          <Col xs={12} md={4}>\n\n\n            <Paper elevation={5} onClick={() => {\n\n              fetch(Benjamin_File)\n                .then(r => r.text())\n                .then(text => {\n\n                  const pdfText = text;\n                  const fileName = \"The Autobiography of Benjamin Franklin\";\n                  history.push(`/read/benj`, { pdfText, fileName })\n                });\n\n            }}>\n\n              <div style={{\n\n                height: 400,\n\n                width: 250,\n\n                backgroundImage: `url(${\"static/img/benj.jpg\"})`,\n\n                backgroundSize: 'cover',\n\n                backgroundRepeat: 'no-repeat',\n\n                backgroundPosition: 'center',\n\n                borderRadius: 10\n\n\n              }\n\n              }>\n\n              </div>\n            </Paper>\n\n          </Col>\n\n\n\n        </Row>\n\n\n      </Container>\n\n\n    </div>\n\n\n\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: '#fff',\n  },\n}));\n\n\nexport default App;\n\n\n","import React, { useState } from 'react'\n\nexport const SearchContext = React.createContext({\n  search: \"\",\n  sessionId: \"\",\n  setSearch: () => {}\n})\n\n\n\nexport const SearchContextProvider = (props) => {\n\n  const setSearch = (search) => {\n    setState({...state, search: search})\n  }\n\n  const initState = {\n    search: \"\",\n    sessionId: props.sessionId,\n    setSearch: setSearch\n  } \n\n  const [state, setState] = useState(initState)\n\n  return (\n    <SearchContext.Provider value={state}>\n      {props.children}\n    </SearchContext.Provider>\n  )\n}","import React, { useState } from 'react'\n\nexport const DiscoverContext = React.createContext({\n    topWordsSegment: [],\n    setTopWordsSegment: () => { },\n    topWords: [],\n    setTopWords: () => { },\n    topMatchingLines: [],\n    setTopMatchingLines: () => { }\n})\n\n\n\nexport const DiscoverContextProvider = (props) => {\n\n    const setTopWordsSegment = (topWordsSegment) => {\n        const segment = topWordsSegment;\n        const segmentLen = segment.length;\n\n\n\n        // the point at which segment cuts are to be made\n        const segmentInterval = [20, 50, 30]\n\n        //       20           20+50=70      100\n        //        |                 |        |\n        //        |                 |        |\n        //        |                 |        |\n        //        ⬇️                 ⬇️        ⬇️\n        // [===================================]\n\n        var firstMarker = Math.floor(segmentLen * segmentInterval[0] * 0.01)\n        var secondMarker = Math.floor(segmentLen * segmentInterval[1] * 0.01) + firstMarker\n\n\n\n        const firstSegment = segment.slice(0, firstMarker)\n        const secondSegment = segment.slice(firstMarker, secondMarker)\n        const thirdSegment = segment.slice(secondMarker, -1)\n\n        \n\n        setDiscoverState({ ...discoverState, topWordsSegment: [firstSegment, secondSegment, thirdSegment] })\n    }\n\n    const setTopWords = (topWords) => {\n        setDiscoverState({ ...discoverState, topWords: topWords })\n    }\n\n    const setTopMatchingLines = (topMatchingLines) => {\n        setDiscoverState({ ...discoverState, topMatchingLines: topMatchingLines })\n    }\n\n    const initState = {\n        topWordsSegment: [],\n        setTopWordsSegment: setTopWordsSegment,\n        topWords: [],\n        setTopWords: setTopWords,\n        topMatchingLines: [],\n        setTopMatchingLines: setTopMatchingLines\n    }\n\n    const [discoverState, setDiscoverState] = useState(initState)\n\n    return (\n        <DiscoverContext.Provider value={discoverState}>\n            {props.children}\n        </DiscoverContext.Provider>\n    )\n}","import React, { useState, useContext, useEffect } from 'react';\n\n\nimport { SearchContext } from '../SearchContextMangement';\n\nimport Chip from '@material-ui/core/Chip';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles({\n    root: {\n        marginRight: 20,\n        marginBottom: 30,\n        marginTop: 15,\n\n    },\n    label: {\n        fontSize: 24\n    },\n});\n\nconst FlatView = ({topN}) => {\n\n\n    const classes = useStyles();\n    const state = useContext(SearchContext);\n\n    ////console.log(topN)\n\n    return (\n        \n            topN.map(\n\n                ([key, value], i) =>\n\n                    <Tooltip title={\"found \" + value + \" times\"}>\n                        <Chip\n                            key={Math.random()}\n                            // avatar={<Avatar>{value}</Avatar>}\n\n                            onClick={(e) => {\n                                e.preventDefault();\n                                state.setSearch(key);\n                            }}\n                            classes={{\n                                root: classes.root,\n                                label: classes.label,\n                            }}\n\n                            label={key} />\n\n                    </Tooltip>\n\n            )\n    );\n}\n\nexport default FlatView;","import React, { useState, useContext, useEffect } from 'react';\n\n\nimport { SearchContext } from '../SearchContextMangement';\n\nimport { Container, Row, Col } from 'reactstrap';\n\n\nimport Chip from '@material-ui/core/Chip';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport Divider from '@material-ui/core/Divider';\n\n\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles({\n    root: {\n        marginRight: 20,\n        marginBottom: 10,\n        marginTop: 10,\n\n    },\n    label: {\n        fontSize: 24\n    },\n});\n\nconst TableVIew = ({ topN }) => {\n\n\n    const classes = useStyles();\n    const state = useContext(SearchContext);\n\n    //console.log(topN)\n\n    return (\n        <Container>\n\n            <Row>\n                <Col xs=\"6\">\n\n                    <span className=\"text\" style={{marginRight:15}}>Keyword</span>\n\n                </Col>\n\n                <Col xs=\"6\">\n                    <span className=\"text\">No of occurences.</span>\n                </Col>\n            </Row>\n\n            <hr/>\n            {topN.map(\n\n                ([key, value], i) =>\n\n                    <Row>\n                        <Col xs=\"6\">\n\n                            <Chip\n                                key={Math.random()}\n                                // avatar={<Avatar>{value}</Avatar>}\n\n                                onClick={(e) => {\n                                    e.preventDefault();\n                                    state.setSearch(key);\n                                }}\n                                classes={{\n                                    root: classes.root,\n                                    label: classes.label,\n                                }}\n\n                                label={key} />\n\n                        \n                        </Col>\n\n                        <Col xs=\"6\">\n                            <p className=\"keywords-occurence-value\">{value}</p>\n                            \n                        </Col>\n                        <Col>\n                         <Divider /></Col>\n                      \n                    </Row>\n                     \n\n            )}\n\n        </Container>\n    );\n}\n\nexport default TableVIew;","import React from 'react'\nimport ContentLoader from 'react-content-loader'\n\nconst KeyWordLoader = props => {\n  return (\n    <ContentLoader\n      height={45}\n      width={90}\n      style={{marginBottom: 20, marginTop: 10}}\n      viewBox=\"0 0 400 200\"\n      backgroundColor=\"#d9d9d9\"\n      foregroundColor=\"#ecebeb\"\n      {...props}\n    >\n      <rect x=\"15\" y=\"15\" rx=\"80\" ry=\"80\" width=\"370\" height=\"150\" />\n      \n      \n    </ContentLoader>\n  )\n}\n\nexport default KeyWordLoader","export default __webpack_public_path__ + \"static/media/shuffle.88b91146.svg\";","import React, { useState, useContext, useEffect, Fragment } from 'react';\nimport axios from 'axios';\n\nimport { SearchContext } from './SearchContextMangement';\nimport { DiscoverContext } from './DiscoverContextManagement';\n\nimport FlatView from './TopWordsView/FlatView';\nimport TableView from './TopWordsView/TableView';\n\nimport Chip from '@material-ui/core/Chip';\nimport IconButton from '@material-ui/core/IconButton';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\n\n\nimport { Container, Row, Col } from 'reactstrap';\n\nimport KeyWordLoader from '../../Loaders/KeyWordLoader';\nimport Button from '@material-ui/core/Button';\n\n\n\nimport YourLogo from './../../shuffle.svg'\n\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles({\n    root: {\n        marginRight: 20,\n        marginBottom: 30,\n        marginTop: 15,\n\n    },\n    label: {\n        fontSize: 18,\n        fontWeight: 400,\n        fontStyle: 'italic'\n    },\n});\n\n\n\nconst TopWords = ({ pdfText }) => {\n\n    ////console.log(pdfText)\n\n    const state = useContext(SearchContext);\n    const discoverState = useContext(DiscoverContext);\n\n    const [randomWordsSegment, setRandomWordsSegment] = useState();\n    const [randomWords, setRandomWords] = useState();\n    const [randomButtonClick, setRandomButtonClick] = useState(false);\n\n    const [showCount, SetShowCount] = useState(2)\n\n    const [topN, setTopN] = useState([])\n    const [textLoading, setTextLoading] = useState(null);\n\n\n\n    let axiosConfig = {\n        headers: {\n            'Content-Type': 'text/json'\n        }\n    }\n\n    let axiosPayload = {\n\n        \"body\": pdfText\n    }\n\n    ////console.log(Object.entries(topN).length, 'len of the objject')\n\n\n    useEffect(() => {\n\n        setTextLoading(true);\n\n        axios.post(\n\n            \"https://eebepu2tvj.execute-api.ap-south-1.amazonaws.com/topN\",\n\n            axiosPayload,\n\n            axiosConfig\n\n        ).then(res => {\n\n            ////console.log(res.statusText, res.data)\n\n            setTopN(res.data)\n\n            setTextLoading(false);\n\n            var firstTopWord = Object.entries(res.data)[0][0];\n\n            state.setSearch(firstTopWord);\n\n\n            setRandomWordsSegment(WordsSegment(res.data));\n\n            //discoverState.setTopWordsSegment(slicedTopN);\n\n        }).catch(function (error) {\n\n            //console.log(error);\n\n        });\n\n\n\n    }, []);\n\n    const classes = useStyles();\n\n\n    var chipPlaceholder = [1, 2, 3, 4];\n\n    return (\n\n        <Container className=\"top-key-words-container\">\n\n            <div className=\"top-words-header\">\n                <span style={{ marginRight: 20 }} onClick={() => {\n\n                }}>Top keywords</span>\n\n\n\n                <IconButton onClick={() => {\n                    var resp = getRandomTopWords(randomWordsSegment[0], randomWordsSegment[1], randomWordsSegment[2])\n                    setRandomWords(resp)\n                    setRandomButtonClick(true)\n                }}>\n                    <img className=\"shuffle-icon-top-words\" src={YourLogo} />\n\n                </IconButton>\n\n\n\n\n            </div>\n\n\n            {!randomButtonClick && <Row style={{ justifyContent: \"space-evenly\" }}>\n\n                {showCount <= 2 ? textLoading ? chipPlaceholder.map(idx => (\n\n                    <KeyWordLoader key={Math.random()} />\n\n                )) : <Fragment>\n\n                        <FlatView topN={SliceObject(topN, 0, 3)} />\n\n                        <Chip\n                            key={Math.random()}\n                            // avatar={<Avatar>{value}</Avatar>}\n\n                            onClick={(e) => {\n                                e.preventDefault();\n                                SetShowCount(showCount + 10)\n                            }}\n\n                            classes={{\n                                root: classes.root,\n                                label: classes.label,\n                            }}\n\n                            label=\"more\" />\n\n\n\n                    </Fragment> : textLoading ? chipPlaceholder.map(idx => (\n\n                        <KeyWordLoader key={Math.random()} />\n\n                    )) : <Fragment>\n\n                            <TableView topN={SliceObject(topN, 0, showCount)} />\n\n                            <div className=\"keywords-more-less-box\">\n                                <Chip\n                                    key={Math.random()}\n                                    // avatar={<Avatar>{value}</Avatar>}\n\n                                    onClick={(e) => {\n                                        e.preventDefault();\n                                        SetShowCount(showCount + 10)\n                                    }}\n\n                                    classes={{\n                                        root: classes.root,\n                                        label: classes.label,\n                                    }}\n\n                                    className=\"chip-center\"\n\n                                    label=\"more\" />\n\n                                <span class=\"keywords-show-less-button\">\n\n                                    <IconButton onClick={(e) => {\n                                        SetShowCount(2)\n                                    }}>\n                                        <ExpandLessIcon />\n                                    </IconButton>\n\n                                </span>\n                            </div>\n\n\n                        </Fragment>}\n\n\n            </Row>}\n\n            {randomButtonClick && <Row style={{ justifyContent: \"space-evenly\" }}>\n\n                {showCount <= 2 ? textLoading ? chipPlaceholder.map(idx => (\n\n                    <KeyWordLoader key={Math.random()} />\n\n                )) : <Fragment>\n\n                        <FlatView topN={randomWords} />\n\n                        <Chip\n                            key={Math.random()}\n                            // avatar={<Avatar>{value}</Avatar>}\n\n                            onClick={(e) => {\n                                e.preventDefault();\n                                SetShowCount(showCount + 10)\n                            }}\n\n                            classes={{\n                                root: classes.root,\n                                label: classes.label,\n                            }}\n\n                            label=\"more\" />\n\n\n\n                    </Fragment> : textLoading ? chipPlaceholder.map(idx => (\n\n                        <KeyWordLoader key={Math.random()} />\n\n                    )) : <Fragment>\n\n                            <TableView topN={SliceObject(topN, 0, showCount)} />\n\n                            <div className=\"keywords-more-less-box\">\n                                <Chip\n                                    key={Math.random()}\n                                    // avatar={<Avatar>{value}</Avatar>}\n\n                                    onClick={(e) => {\n                                        e.preventDefault();\n                                        SetShowCount(showCount + 10)\n                                    }}\n\n                                    classes={{\n                                        root: classes.root,\n                                        label: classes.label,\n                                    }}\n\n                                    className=\"chip-center\"\n\n                                    label=\"more\" />\n\n                                <span class=\"keywords-show-less-button\">\n\n                                    <IconButton onClick={(e) => {\n                                        SetShowCount(2)\n                                    }}>\n                                        <ExpandLessIcon />\n                                    </IconButton>\n\n                                </span>\n                            </div>\n\n\n                        </Fragment>}\n\n\n            </Row>}\n\n\n\n\n        </Container>\n    );\n}\n\n\nfunction SliceObject(obj, start, end) {\n    let slicedObj = []\n    Object.entries(obj).slice(start, end).map(([key, value], i) => slicedObj.push([key, value]));\n    return slicedObj;\n}\n\nfunction WordsSegment(data) {\n    let lenTopN = Object.entries(data).length\n\n    // get len of the first 30% segment of top N words object\n    let totalSegmentLen = Math.floor(lenTopN * 0.3)\n\n    // top words segment contains first 30% items from top N words object\n    var slicedTopN = SliceObject(data, 0, totalSegmentLen)\n\n    const segment = slicedTopN;\n    const segmentLen = segment.length;\n\n\n\n    // the point at which segment cuts are to be made\n    const segmentInterval = [20, 50, 30]\n\n    //       20           20+50=70      100\n    //        |                 |        |\n    //        |                 |        |\n    //        |                 |        |\n    //        ⬇️                 ⬇️        ⬇️\n    // [===================================]\n\n    var firstMarker = Math.floor(segmentLen * segmentInterval[0] * 0.01)\n    var secondMarker = Math.floor(segmentLen * segmentInterval[1] * 0.01) + firstMarker\n\n\n\n    const firstSegment = segment.slice(0, firstMarker)\n    const secondSegment = segment.slice(firstMarker, secondMarker)\n    const thirdSegment = segment.slice(secondMarker, -1)\n\n    return [firstSegment, secondSegment, thirdSegment]\n}\n\n\nfunction getRandomTopWords(firstSegment, secondSegment, thirdSegment) {\n\n    const firstTopWord = getRandom(firstSegment)\n    const secondTopWord = getRandom(secondSegment)\n    const thirdTopWord = getRandom(thirdSegment)\n\n    //console.log(firstTopWord, secondTopWord, thirdTopWord)\n\n    return [firstTopWord, secondTopWord, thirdTopWord]\n}\n\n\nfunction getRandom(list) {\n    return list[Math.floor((Math.random() * list.length))];\n}\n\n\n\nexport default TopWords;\n\n","import { useState, useEffect } from 'react';\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height\n  };\n}\n\nexport function percentMediaScreenSize(size, X) {\n  var adjust = size - (size*(X/100));\n\n  return adjust\n}\n\nexport default function useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowDimensions;\n}\n","import React from 'react'\nimport ContentLoader from 'react-content-loader'\nimport useWindowDimensions, {percentMediaScreenSize} from './useWindowDimensions'\n\n\nconst SnippetLoader = props => {\n  const { height, width } = useWindowDimensions();\n\n\n\n  return (\n    <ContentLoader\n      speed={1}\n      width={840}\n      height={84}\n      viewBox=\"0 0 900 84\"\n      backgroundColor=\"#f6f6ef\"\n      foregroundColor=\"#e8e8e3\"\n      {...props}\n    >\n      <rect x=\"11\" y=\"4\" rx=\"0\" ry=\"0\" width={percentMediaScreenSize(width,30)} height=\"22\" />\n      \n      <rect x=\"11\" y=\"33\" rx=\"0\" ry=\"0\" width={percentMediaScreenSize(width,82)} height=\"13\" />\n      <rect x={percentMediaScreenSize(width,60)} y=\"33\" rx=\"0\" ry=\"0\" width={percentMediaScreenSize(width,70)} height=\"13\" />\n      <rect x={percentMediaScreenSize(width,80)} y=\"33\" rx=\"0\" ry=\"0\" width={percentMediaScreenSize(width,81)} height=\"13\" />\n      <rect x=\"11\" y=\"33\" rx=\"0\" ry=\"0\" width={percentMediaScreenSize(width,82)} height=\"13\" />\n\n      <rect x=\"11\" y=\"4\" rx=\"0\" ry=\"0\" width={percentMediaScreenSize(width,30)} height=\"22\" />\n      \n      <rect x=\"11\" y=\"33\" rx=\"0\" ry=\"0\" width={percentMediaScreenSize(width,82)} height=\"13\" />\n      <rect x={percentMediaScreenSize(width,60)} y=\"33\" rx=\"0\" ry=\"0\" width={percentMediaScreenSize(width,70)} height=\"13\" />\n      <rect x={percentMediaScreenSize(width,80)} y=\"33\" rx=\"0\" ry=\"0\" width={percentMediaScreenSize(width,81)} height=\"13\" />\n      <rect x=\"11\" y=\"33\" rx=\"0\" ry=\"0\" width={percentMediaScreenSize(width,82)} height=\"13\" />\n\n      \n\n\n    </ContentLoader>\n  )\n}\n\n\n\nexport default SnippetLoader","import React, { useContext } from 'react';\n\n\n\nimport { Progress } from 'react-sweet-progress';\nimport \"react-sweet-progress/lib/style.css\";\nimport { Container, Row, Col } from 'reactstrap';\n\n\nfunction getStatus(percentage) {\n    if (percentage > 74) {\n        return \"success\"\n    } else if (percentage > 56 && percentage < 75) {\n        return \"default\"\n    } else if (percentage < 57 && percentage > 51) {\n        return \"active\"\n    } else {\n        return \"error\"\n    }\n}\n\n\n\nconst ImpLineItems = ({ content, score, itemNo }) => {\n\n\n    // //console.log(content)\n\n    var score = parseFloat(score)\n    // //console.log(score)\n    var IntScore = Math.floor(score * 100)\n\n    return (\n        <Row style={{ marginBottom: 20 }}>\n\n            <Col xs={12}>\n                <p className=\"prediction-content\">\n                    <span style={{ color: 'darkgrey' }}>{itemNo + 1}. </span> {content}\n                </p>\n            </Col>\n\n            <Col xs={12}>\n\n                <Progress\n                    theme={\n                        {\n                            error: {\n                                symbol: IntScore + '😱',\n                                trailColor: 'pink',\n                                color: 'red'\n                            },\n                            default: {\n                                symbol: IntScore + '😊',\n                                trailColor: 'lightblue',\n                                color: 'blue'\n                            },\n                            active: {\n                                symbol: IntScore + '😀',\n                                trailColor: 'yellow',\n                                color: 'orange'\n                            },\n                            success: {\n                                symbol: IntScore + '🌟',\n                                trailColor: 'lime',\n                                color: 'green'\n                            }\n                        }\n                    }\n                    style={{ marginLeft: 10, marginRight: 20, width: '98%' }} percent={IntScore} status={getStatus(IntScore)} />\n            </Col>\n\n            <hr />\n\n        </Row>\n\n    );\n}\n\nexport default ImpLineItems;","import React, { useEffect, useState, useContext } from 'react';\nimport axios from 'axios';\n\nimport { SearchContext } from './SearchContextMangement';\n\nimport SnippetLoader from '../../Loaders/SnippetLoader'\nimport ImpLineItems from './ImpLineModules/ImpLineItems'\n\nimport Chip from '@material-ui/core/Chip';\n\n\nimport { Container, Row, Col } from 'reactstrap';\n\n\nconst ImpLines = ({ pdfText }) => {\n\n    const state = useContext(SearchContext);\n\n    //console.log(state.search, \": value from search box landing 😁 \")\n    //console.log(state.sessionId, \": sessionID is 😛\")\n    const [smartSearchResults, setSmartSearch] = useState('')\n    const [textLoading, setTextLoading] = useState(null);\n    const [resultsCount, setResultsCount] = useState(5);\n\n    const [demoSessionStatus, setDemoSessionStatus] = useState(null);\n\n    // //console.log(pdfText, \"in imp lines hehehehe\")\n\n    let axiosConfig = {\n\n        headers: {\n\n            'Content-Type': 'application/json'\n\n        }\n    }\n\n    let axiosPayload = {\n\n        \"corpus\": pdfText, \"text\": state.search, \"top\": resultsCount,\n\n        \"sessionId\": state.sessionId, \"accuracyGreaterThan\": 0.2\n\n    }\n\n\n\n    ////console.log(smartSearchResults)\n\n\n    useEffect(() => {\n\n        setTextLoading(true);\n        if (demoSession.includes(state.sessionId)){\n            setDemoSessionStatus(true)\n        }        \n\n        setResultsCount(5)\n\n        axios.post(\n            \"http://localhost:8890\",\n            axiosPayload,\n            axiosConfig\n        )\n            .then(res => {\n\n                ////console.log(res.statusText, res.data)\n\n                setSmartSearch(res.data);\n                setTextLoading(false);\n\n            }).catch(function (error) {\n                //console.log(error);\n            });\n\n\n\n    }, [state.search]);\n\n\n    useEffect(() => {\n\n        setTextLoading(true);\n\n\n        axios.post(\n            \"http://localhost:8890\",\n            axiosPayload,\n            axiosConfig\n        )\n            .then(res => {\n\n                //.log(res.statusText, res.data)\n\n                setSmartSearch(res.data);\n                setTextLoading(false);\n\n            }).catch(function (error) {\n                //console.log(error);\n            });\n\n\n\n    }, [resultsCount]);\n\n\n\n    var ContentPlaceholder = [1, 2];\n\n    const demoSession = ['benj', 'naval', 'think']\n\n    return (\n\n        <Container className=\"top-key-words-container\">\n\n            <Row className=\"important-lines-header\">\n                <span >\n                    Matching Lines for <i> {state.search == '' ? '...' : state.search}</i>\n                </span>\n\n\n                {demoSession.includes(state.sessionId) ?\n                    <span id=\"book-percent\" style={{backgroundColor:'#90ee9073'}}>\n                        100 % loaded\n                    </span>\n\n                    :\n                    <span id=\"book-percent\" style={{backgroundColor:'rgb(255 255 21 / 31%)'}}>\n                        20% loaded\n                </span>\n                }\n\n\n            </Row>\n\n\n\n            <hr />\n\n\n            {textLoading ? ContentPlaceholder.map(idx => (\n                <SnippetLoader key={Math.random()} />\n            )) : Object.entries(smartSearchResults).map(\n                ([key, value], i) =>\n                    <ImpLineItems key={Math.random()} content={key} score={value} itemNo={i}/>\n\n            )}\n\n            <div className=\"App\">\n                {demoSessionStatus && (Object.entries(smartSearchResults)).length < 1 ? <SnippetLoader key={Math.random()} /> : null}\n                {!demoSessionStatus && !textLoading && (Object.entries(smartSearchResults)).length < 1 ? <Chip label={'No results found 😕'} /> : null}\n                {(Object.entries(smartSearchResults)).length > resultsCount - 1 ? <Chip clickable onClick={() => { setResultsCount(resultsCount + 5) }}\n\n                    label={'load more'} /> : null}\n            </div>\n\n            <div style={{ PaddingBottom: 30 }}>\n                <hr />\n            </div>\n\n\n        </Container>\n    );\n}\n\nexport default ImpLines;","import React, { useState, useContext, useEffect, Fragment } from 'react';\nimport axios from 'axios';\n\nimport { DiscoverContext } from './DiscoverContextManagement';\n\n\nimport FlatView from './TopWordsView/FlatView';\nimport TableView from './TopWordsView/TableView';\n\nimport Chip from '@material-ui/core/Chip';\nimport IconButton from '@material-ui/core/IconButton';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\n\nimport { Container, Row, Col } from 'reactstrap';\n\nimport KeyWordLoader from '../../Loaders/KeyWordLoader';\n\nimport Avatar from '@material-ui/core/Avatar';\n\nimport { SearchContext } from './SearchContextMangement';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n    root: {\n        marginRight: 20,\n        marginBottom: 30,\n        marginTop: 15,\n\n    },\n    label: {\n        fontSize: 18,\n        fontWeight: 400,\n        fontStyle: 'italic'\n    },\n});\n\n\n\nconst Discover = ({ pdfText }) => {\n\n    ////console.log(pdfText)\n\n\n\n    const discoverState = useContext(DiscoverContext);\n    const state = useContext(SearchContext);\n\n\n\n    \n    // const firstTopWord = getRandom(discoverState.topWordsSegment[0])\n    // const secondTopWord = getRandom(discoverState.topWordsSegment[1])\n    // const thirdTopWord = getRandom(discoverState.topWordsSegment[2])\n\n    //console.log(discoverState.topWordsSegment[0])\n\n    // function getRandomTopWords() {\n    //     //console.log(firstSegment)\n\n    \n    //     //console.log(firstTopWord[0], typeof (firstTopWord))\n\n\n    //     return [firstTopWord[0], secondTopWord[0], thirdTopWord[0]]\n    // }\n\n    //var a = getRandomTopWords()\n    ////console.log(a)\n\n\n\n\n    let axiosConfig = {\n\n        headers: {\n\n            'Content-Type': 'application/json'\n\n        }\n    }\n\n\n\n\n    const axiosPayload = (searchFor) => {\n\n        return {\n            \"corpus\": pdfText, \"text\": searchFor, \"top\": 5,\n\n            \"sessionId\": state.sessionId, \"accuracyGreaterThan\": 0.2\n        }\n\n    }\n\n    // 200,000\n    // 5000\n\n\n    // useEffect(() => {\n\n    //     setTextLoading(true);\n\n\n\n    //     axios.post(\n    //         \"http://localhost:8891\",\n    //         axiosPayload('happy'),\n    //         axiosConfig\n    //     )\n    //         .then(res => {\n\n    //             //console.log(res.statusText, res.data)\n\n    //             let chosenLine = getRandom(Object.entries(res.data))[0]\n    //             discoverState.setTopMatchingLines(chosenLine)\n\n    //             setTextLoading(false);\n\n    //         }).catch(function (error) {\n    //             //console.log(error);\n    //         });\n\n\n\n    // }, [state.search]);\n\n    const [showCount, SetShowCount] = useState(2)\n\n    const [topN, setTopN] = useState([])\n    const [textLoading, setTextLoading] = useState(null);\n\n\n    const classes = useStyles();\n\n    const handleShowLessButton = () => {\n\n    }\n\n    var chipPlaceholder = [1, 2, 3, 4];\n\n    return (\n\n        <Container className=\"top-key-words-container\">\n\n            <div className=\"top-words-header\">\n                <span style={{ marginRight: 20 }} onClick={() => {\n\n                }}>Top keywords</span>\n\n                {/* <span> | </span>\n\n                <span style={{ marginLeft: 20 }} onClick={()=>{\n                    SetSelection('questionsSug')\n                }}>Questions</span> */}\n            </div>\n\n\n            <Row style={{ justifyContent: \"space-evenly\" }}>\n\n                {showCount <= 2 ? textLoading ? chipPlaceholder.map(idx => (\n\n                    <KeyWordLoader key={Math.random()} />\n\n                )) : <Fragment>\n\n                        <FlatView topN={SliceObject(topN, 0, 3)} />\n\n                        <Chip\n                            key={Math.random()}\n                            // avatar={<Avatar>{value}</Avatar>}\n\n                            onClick={(e) => {\n                                e.preventDefault();\n                                SetShowCount(showCount + 10)\n                            }}\n\n                            classes={{\n                                root: classes.root,\n                                label: classes.label,\n                            }}\n\n                            label=\"more\" />\n\n\n\n                    </Fragment> : textLoading ? chipPlaceholder.map(idx => (\n\n                        <KeyWordLoader key={Math.random()} />\n\n                    )) : <Fragment>\n\n                            <TableView topN={SliceObject(topN, 0, showCount)} />\n\n                            <div className=\"keywords-more-less-box\">\n                                <Chip\n                                    key={Math.random()}\n                                    // avatar={<Avatar>{value}</Avatar>}\n\n                                    onClick={(e) => {\n                                        e.preventDefault();\n\n                                        //getRandomTopWords()\n                                    }}\n\n                                    classes={{\n                                        root: classes.root,\n                                        label: classes.label,\n                                    }}\n\n                                    className=\"chip-center\"\n\n                                    label=\"more\" />\n\n                                <span class=\"keywords-show-less-button\">\n\n                                    <IconButton onClick={(e) => {\n                                        SetShowCount(2)\n                                    }}>\n                                        <ExpandLessIcon />\n                                    </IconButton>\n\n                                </span>\n                            </div>\n\n\n                        </Fragment>}\n\n\n\n\n\n\n\n\n            </Row>\n\n\n        </Container>\n    );\n}\n\n\nfunction SliceObject(obj, start, end) {\n    let slicedObj = []\n    Object.entries(obj).slice(start, end).map(([key, value], i) => slicedObj.push([key, value]));\n    return slicedObj;\n}\n\nfunction getRandom(list) {\n    return list[Math.floor((Math.random() * list.length))];\n}\n\n\nexport default Discover;\n\n","import React, { useState, useContext } from 'react';\n\nimport { SearchContext } from './SearchContextMangement';\n\n\nimport SnippetLoader from '../../Loaders/SnippetLoader';\n\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport KeyboardReturnIcon from '@material-ui/icons/KeyboardReturn';\n\n\nimport { Container, Row, Col } from 'reactstrap';\n\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\n\nimport SearchIcon from '@material-ui/icons/Search';\nimport { useEffect } from 'react';\n\n\n\nconst useStyles = makeStyles(theme => ({\n    customHoverFocus: {\n        \"&.MuiIconButton-root \": {marginTop: 20, background: 'rgba(239, 240, 246, 1)'},\n      \"&:hover, &.Mui-focusVisible\": { backgroundColor: \"lightgreen\" }\n    }\n  }));\n\n\nconst CssTextField = withStyles({\n    root: {\n        background: 'rgba(239, 240, 246, 1)',\n        margin: 15,\n        width: '70%',\n        borderRadius: 16,\n        '& label.Mui-focused': {\n            color: 'green',\n        },\n        '& .MuiInput-underline:after': {\n            borderBottomColor: 'green',\n        },\n        '& .MuiOutlinedInput-root': {\n            '& fieldset': {\n                borderColor: '#f0e8e878',\n                borderRadius: 16\n            },\n            '&:hover fieldset': {\n                borderColor: '#ffffff'\n            },\n            '&.Mui-focused fieldset': {\n                borderColor: 'black',\n            },\n        },\n    }\n})(TextField);\n\n\nconst SmartSearch = () => {\n    \n    const state = useContext(SearchContext);\n\n    const [localInputValue, SetLocalInputValue ] = useState('');\n    const classes = useStyles();\n    \n    const handleSearchChange = (event) => {\n        SetLocalInputValue(event.target.value)\n    }\n\n    const handleSubmit = () => {\n        state.setSearch(localInputValue);\n    }\n\n    const handleKeyPress = (e) => {\n        if(e.keyCode == 13){\n           //console.log('enter value pressed 😁', e.target.value);\n           state.setSearch(localInputValue);\n        }\n     }\n\n    useEffect(() => {\n        SetLocalInputValue(state.search)\n    }, [state.search])\n\n    //console.log(localInputValue)\n\n    return (\n        <Container className=\"top-key-words-container\">\n            <CssTextField\n                InputProps={{\n                    startAdornment: <SearchIcon />\n                }}\n                value={localInputValue}\n                variant=\"outlined\"\n                id=\"custom-css-outlined-input\"\n           \n                onChange={handleSearchChange}\n                onKeyDown={handleKeyPress}\n                inputProps={{style: {fontSize: 24, marginLeft: 10}}}\n            />\n            <IconButton className={classes.customHoverFocus} onClick={handleSubmit}>\n                <KeyboardReturnIcon />\n            </IconButton>\n\n\n\n\n        </Container >\n    );\n}\n\nexport default SmartSearch;","import React, { useEffect, Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport TopWords from './TopWords'\nimport ImpLines from './ImpLines'\n\nimport Discover from './Discover'\n\n\nimport { Container, Row, Col } from 'reactstrap';\nimport SmartSearch from './SmartSearch';\nimport { SearchContextProvider } from './SearchContextMangement';\n\n\n\nconst ReadHome = ({ location, match }) => {\n\n    const _id = match.params._id;\n\n    const { pdfText } = location.state\n\n    const { fileName } = location.state\n\n\n\n    // const splitText =  splitTextByNewline(pdfText)\n\n\n\n    return (\n        <Fragment>\n\n\n            <div className=\"App-read-page\">\n\n\n                {/* <h1 className=\"read-page-header\">Read what you need</h1> */}\n                <h1 className=\"read-page-file-name\">{fileName}</h1>\n\n\n                <SearchContextProvider sessionId={_id}>\n\n                 \n\n                        <SmartSearch />\n\n                        <div style={{ height: 10 }}></div>\n\n                        <TopWords pdfText={pdfText} />\n\n\n                        <div style={{ height: 10 }}></div>\n\n                        <ImpLines pdfText={pdfText} />\n\n    \n                </SearchContextProvider>\n\n            </div>\n        </Fragment>\n    );\n}\n\nexport default ReadHome;\n\n\nfunction splitTextByNewline(text) {\n\n    //text = text.replaceAll(\"\\n\", \" \");\n    text = text.replace(/\\n/g, \" \");\n    var splits = text.split('. ')\n\n\n    var paraArray = [];\n    let prev = 0;\n\n    var arrayLength = splits.length;\n    for (var i = 0; i < arrayLength; i++) {\n\n        if (i % 2 === 0) {\n            paraArray.push(\"\".concat(splits.slice(prev, i)))\n            prev = i;\n        }\n    }\n\n\n\n    var removeSmallStringsArray = [];\n    var splicedArrayLength = paraArray.length;\n    for (var i = 0; i < splicedArrayLength; i++) {\n        if (paraArray[i].length >= 24) {\n            removeSmallStringsArray.push(paraArray[i]);\n        }\n    }\n\n    return removeSmallStringsArray\n\n}","import React from 'react';\n\nconst Faqs = () => {\n    return (\n        <div className=\"App\">\n\n\n\n\n            <span className=\"read-page-header\">Frequently Asked Questions <i class=\"twa twa-slightly-smiling-face\"></i></span>\n\n            <div style={{ marginBottom: 50 }}></div>\n\n            <div className=\"faq-list\">\n                <li>How long does it usually take for the results to show up ?</li>\n                <p>It can take anywhere between 10 seconds to 30 seconds, given the servers are not overloaded with requests.</p>\n\n                <li>What does 10% loaded in the results page mean ?</li>\n                <p>It means only 10% of the pdf is scanned uniformly and results are shown from that. This 10% limit on pdf is set, mainly because this a demo version to test the product.</p>\n\n                <li>Will my pdf be stored ?</li>\n                <p>The pdf is not stored. Only the encodings of the pdf that are used to serve smart results will be stored till tonight, after which they will be deleted.</p>\n\n                <li>How to get 100% results shown for a pdf?</li>\n                <p>If handful of people are interested to obtain full results, then we can start to rollout features that serve those needs.</p>\n\n                <li>Why cannot we share the results page link to our friends ?</li>\n                <p>This is just a demo test product, if more people are interested, we will work on rolling out this feature too. Let us know about it by filling out the feedback form 😄 !</p>\n\n                <li>Why use this?</li>\n                <p>It mainly originates to discover nuggets of gold that lay hidden within books and access them quickly.</p>\n\n                <li>How does this work ?</li>\n                <p>In the backend there's a simple semantic search that takes place on the sentence embeddings computed on the sentences from the whole pdf. The emebeddings are generated from a sentence transformer library built on top of hugging face. Citation below</p>\n\n                <li>Where was this created ?</li>\n                <p>This was created in Manipal under some shade of coconut trees <i class=\"twa  twa-palm-tree\"></i> and a mix of beach vibes <i class=\"twa twa-beach-with-umbrella\"></i></p>\n\n\n            </div>\n\n            <hr className=\"break-80\"/>\n\n\n            <span className=\"read-page-header\">Built using</span>\n\n        \n            <br />\n            <div className=\"faq-list\">\n\n        <div style={{ marginBottom: 50 }}></div>\n                <code>\n                    <li>\n                        Reimers, Nils and Gurevych, Iryna, Sentence-BERT: Sentence Embeddings using Siamese BERT-Networks, (2019), GitHub repository, <a target=\"blank\" href=\"https://github.com/UKPLab/sentence-transformers\">Sentence Transformers</a>\n                </li>\n                </code>\n\n                <div style={{ marginBottom: 50 }}></div>\n\n                <code>\n                    <li>Thomas Wolf and Lysandre Debut and Victor Sanh and Julien Chaumond and Clement Delangue and Anthony Moi and Pierric Cistac and Tim Rault and Rémi Louf and Morgan Funtowicz and Joe Davison and Sam Shleifer and Patrick von Platen and Clara Ma and Yacine Jernite and Julien Plu and Canwen Xu and Teven Le Scao and Sylvain Gugger and Mariama Drame and Quentin Lhoest and Alexander M. Rush, Transformers: State-of-the-Art Natural Language Processing, (2020), GitHub repository, <a target=\"blank\" href=\"https://github.com/huggingface/transformers\">Transformers</a></li>\n                </code>\n\n                <div style={{ marginBottom: 50 }}></div>\n\n                <code>\n                    <li>Deploy machine learning models to production <a href=\"https://github.com/cortexlabs/cortex\">Cortex.dev</a> </li>\n                </code>\n                \n                <div style={{ marginBottom: 50 }}></div>\n\n            </div>\n\n\n\n\n\n        </div>\n\n\n    );\n}\n\nexport default Faqs;","import React, { Fragment } from 'react';\nimport { BrowserRouter as Router, Link, Route, Switch, Redirect } from 'react-router-dom';\nimport ReactDOM from 'react-dom';\n\n\nimport './index.css';\nimport './twemoji-awesome.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nimport App from './App';\nimport ReadHome from './components/Read/ReadHome.js';\nimport Faqs from \"./components/Faqs\";\n\nconst Root = () => {\n\n  return (\n\n    <Router>\n\n      < div class=\"sidebar\" >\n\n        <Link to=\"/\" >   Home       </Link>\n\n        <a target=\"blank\" href=\"https://forms.gle/ZE73f4cdWVMmwkPy8\">Feedback</a>\n\n        <Link to=\"/faq\" >   FAQ's       </Link>\n\n      </div >\n\n      <Fragment>\n\n        <Switch>\n\n          <Route path=\"/\" exact component={App} />\n\n          <Route path=\"/read/:_id\" component={ReadHome} />\n\n          <Route path=\"/faq\" component={Faqs} />\n\n        </Switch>\n      \n\n\n      </Fragment>\n \n\n    \n    </Router>\n\n  )\n\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <Root />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(//console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}